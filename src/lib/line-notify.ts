// src/lib/line-notify.ts
import { env } from '@/config/env'

const LINE_NOTIFY_API = 'https://notify-api.line.me/api/notify';

interface NotifyOrderParams {
  orderId: number;
  name: string;
  totalAmount: number;
  items: Array<{
    design: string;
    size: string;
    quantity: number;
    price_per_unit: number;
  }>;
  isPickup: boolean;
  address?: string;
  slipImageUrl?: string;
}

export async function sendOrderNotification({
  orderId,
  name,
  totalAmount,
  items,
  isPickup,
  address,
  slipImageUrl,
}: NotifyOrderParams): Promise<boolean> {
  const LINE_NOTIFY_TOKEN = env.isTestEnvironment 
    ? process.env.TEST_LINE_NOTIFY_TOKEN 
    : process.env.LINE_NOTIFY_TOKEN;

  if (!LINE_NOTIFY_TOKEN) {
    console.error('LINE_NOTIFY_TOKEN is not set for', env.isTestEnvironment ? 'test' : 'production', 'environment');
    return true; // ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
  }

  const getDesignName = (designId: string): string => ({
    '1': '‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÉ‡∏™‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô ‡πÅ‡∏Ç‡∏ô‡∏¢‡∏≤‡∏ß',
    '2': '‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÉ‡∏™‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô ‡πÅ‡∏Ç‡∏ô‡∏™‡∏±‡πâ‡∏ô',
    '3': '‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 3 ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡∏Ñ‡∏Ñ‡∏π‡πà',
    '4': '‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 4 ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏•‡∏∂‡∏Å'
  }[designId] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏');

  const itemsList = items.map(item => 
    `- ${getDesignName(item.design)} ‡∏Ç‡∏ô‡∏≤‡∏î ${item.size} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${item.quantity} ‡∏ä‡∏¥‡πâ‡∏ô`
  ).join('\n');

  const message = `
${env.isTestEnvironment ? '[‡∏ó‡∏î‡∏™‡∏≠‡∏ö] ' : ''}üõç ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà!
‡∏£‡∏´‡∏±‡∏™‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${orderId}
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á: ${name}
‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${totalAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó

‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:
${itemsList}

‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${isPickup ? '‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô' : '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á'}
${!isPickup && address ? `‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${address}` : ''}
  `.trim();

  try {
    // Send text notification
    const messageResponse = await fetch(LINE_NOTIFY_API, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LINE_NOTIFY_TOKEN}`,
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        message,
      }),
    });

    if (!messageResponse.ok) {
      const error = await messageResponse.text();
      throw new Error(`Failed to send LINE notification: ${error}`);
    }

    // If there's a slip image, send it as a separate message
    if (slipImageUrl) {
      const imageResponse = await fetch(LINE_NOTIFY_API, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${LINE_NOTIFY_TOKEN}`,
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          message: `${env.isTestEnvironment ? '[‡∏ó‡∏î‡∏™‡∏≠‡∏ö] ' : ''}‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô - ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${orderId}`,
          imageFullsize: slipImageUrl,
          imageThumbnail: slipImageUrl,
        }),
      });

      if (!imageResponse.ok) {
        const error = await imageResponse.text();
        throw new Error(`Failed to send slip image: ${error}`);
      }
    }

    return true;
  } catch (error) {
    console.error('LINE Notify Error:', error);
    return false;
  }
}

export async function sendStatusUpdateNotification(
  orderId: number,
  name: string,
  status: string
): Promise<boolean> {
  const LINE_NOTIFY_TOKEN = env.isTestEnvironment 
    ? process.env.TEST_LINE_NOTIFY_TOKEN 
    : process.env.LINE_NOTIFY_TOKEN;

  if (!LINE_NOTIFY_TOKEN) {
    console.error('LINE_NOTIFY_TOKEN is not set for', env.isTestEnvironment ? 'test' : 'production', 'environment');
    return true;
  }

  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'pending':
        return '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'
      case 'confirmed':
        return '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'
      case 'processing':
        return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á'
      case 'completed':
        return '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß'
      case 'cancelled':
        return '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
      default:
        return status
    }
  }

  const message = `
${env.isTestEnvironment ? '[‡∏ó‡∏î‡∏™‡∏≠‡∏ö] ' : ''}üì¶ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
‡∏£‡∏´‡∏±‡∏™‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${orderId}
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á: ${name}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${getStatusLabel(status)}
  `.trim();

  try {
    const response = await fetch(LINE_NOTIFY_API, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LINE_NOTIFY_TOKEN}`,
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        message,
      }),
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`Failed to send status update notification: ${error}`);
    }

    return true;
  } catch (error) {
    console.error('LINE Notify Error:', error);
    return false;
  }
}